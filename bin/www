#!/usr/bin/env node

/**
 * Dependencias del módulo. (Module dependencies.)
 */

const app = require('../app');
const debug = require('debug')('ejsrv-njs01-a1:server');
const http = require('http');

const myhandler =require('../controller/handler');
let srvPuerto
let srvNombre

//const { version } = require('os');

/**
 * Obtenga puerto del entorno y almacene en Express. 
 * (Get port from environment and store in Express.)
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Crear un servidor HTTP. 
 * (Create HTTP server.)
 */

var server = http.createServer(app);

/**
 * Escuche el puerto provisto, en todas las interfaces de red. 
 * (Listen on provided port, on all network interfaces.)
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normaliza un puerto en un número, cadena o falso.
 * (Normalize a port into a number, string, or false.)
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // tubo llamado (named pipe)
    return val;
  }

  if (port >= 0) {
    // número de puerto (port number)
    return port;
  }

  return false;
}

/**
 * Ayector de eventos para el evento de "error" del servidor HTTP. 
 * (Event listener for HTTP server "error" event.)
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  
  // Manejar errores de escucha específicos con mensajes amistosos 
  // (handle specific listen errors with friendly messages)
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Ayector de eventos para el evento de "escuchar" del servidor HTTP. 
 * (Event listener for HTTP server "listening" event.)
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

 
  // Muestro informacion en la consola
   const info =` * Express.js version: ${myhandler.obtenerExpressVersion()}` // Opcional: obtengo informacion adicional, por el momento solo la version de express.
   console.log(`El Servidor de ejemplo Escucha en el puerto: ${addr.port}`); // Arranco el Servidor
   console.log(` * Direcion/es Ip V4: ${myhandler.obtenerIpLocal()}`)
   console.log(` * Node Version: ${myhandler.obtenerNodeVersion()}`);
   console.log(`${info}`);
   console.log(` * Iniciado: ${myhandler.obtenerMomentoDeArranque()}`);
   console.log(``);
   console.log(` * Ir a la pagina inicial del servidor: http://localhost:${addr.port}`);

}

